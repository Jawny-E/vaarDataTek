// Hvordan koble opp AHT10 til ESP32:
// SCL = D22
// SDA = D21
// VIN = VIN
// GND = GND

//Hvordan koble opp OLED-skjermen til ESP32:
// SDA = D21
// SCK = D22
// VDD = 3.3V
// GND = GND

// Deklarerer konstanter 
const int vifte = 4;
const int ledPin = 5;
const int sensorPin = 32;
const int LED = 5;
int tidligere;

//Bibliotek nødvendige for AHT10-sensoren
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHT10.h>
Adafruit_AHT10 aht;

//Bibliotek nødvendige for OLED-skjermen
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display dimensjoner på skjermen vår (128x32)
#define SCREEN_HEIGHT 32 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Lagrer SSID og passord på nettverket vi benytter oss av i to konstanter 
const char* ssid = "ThisIsANetwork";
const char* password = "ThisIsPassword";

// Lagrer IP-adressen til MQTT-brokeren vi benytter oss av 
const char* mqtt_server = "192.168.254.216";

// Setter opp tilkobling mellom ESP32 og WiFi
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;


void setup_wifi() { //Funskjon for å sette opp WiFi
  delay(500);
  // Indikerer at vi starter oppkoblingen til Wifi 
  Serial.println();
  Serial.print("Tilkobler til");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  //Dersom vi venter på å bli koblet opp printes det "..."
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  //Indikerer at vi er koblet opp, samt returnerer IP adressen
  Serial.println("");
  Serial.println("WiFi koblet til");
  Serial.println("IP addressen: ");
  Serial.println(WiFi.localIP());
}


void AHT10_finder(){ //Funskjon som sjekker om sensoren er riktig tilkoblet 
    if (! aht.begin()) {
    Serial.println("Kan ikke finne AHT10, sjekk om den er koblet til riktig!");
    Serial.println("SCL = D22");
    Serial.println("SDA = D21");
    Serial.println("VIN = VIN");
    Serial.println("GND = GND");
    while (1) delay(10);
  }
  Serial.println("AHT10 funnet");
}


void OLED_finder(){ //Funksjon som sjekker om OLED-skjermen er koblet til riktig
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);}

  display.clearDisplay(); // Clearer skjerm for å evt. fjerne det tidligere innholdet
  display.setTextSize(1); // Velger størrelse på tekst
  display.setTextColor(WHITE); // Velger farge på tekst 
  display.setCursor(0, 10); //
}


void setup() {
  Serial.begin(115200); //Oppretter seriell-kommunikasjon til datamaskin, med baud rate 115200
  tidligere = millis();
  pinMode(vifte, OUTPUT); //deklarerer viften som output 
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  AHT10_finder();
  OLED_finder();
}


void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();
  if (String(topic) == "esp32/output") {
    Serial.print("Changing output to ");
    if(messageTemp == "on"){
      Serial.println("on");
      digitalWrite(ledPin, HIGH);
    }
    else if(messageTemp == "off"){
      Serial.println("off");
      digitalWrite(ledPin, LOW);
    }
  }
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("esp32/output");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void Temphum(){
    sensors_event_t humidity, temp;
    int humidity_value;
    aht.getEvent(&humidity, &temp);
    // Temperature in Celsius
    float temperature = temp.temperature;  
    
    // Convert the value to a char array
    char tempString[8];
    dtostrf(temperature, 1, 2, tempString);
    Serial.print("Temperature: ");
    Serial.println(tempString);
    display.setCursor(0, 0);
    display.print(tempString);
    display.print(" Celcius");
    display.display();
    client.publish("esp32/temperature", tempString);

    
    //Tar viften på hvis temperaturen overstiger 25 grader
    if(temperature > 25){
      digitalWrite(vifte, HIGH);
    }
    else{
      digitalWrite(vifte, LOW);
    }

    humidity_value = humidity.relative_humidity;
    
    // Convert the value to a char array
    char humString[8];
    dtostrf(humidity_value, 1, 2, humString);
    Serial.print("Humidity: ");
    Serial.println(humString);
    
    //Displayer verdiene på skjermen
    display.setCursor(0, 20);
    display.print(humString);
    display.print(" %");
    display.display();
    client.publish("esp32/humidity", humString);
}


float lys(){
    int sensorValue = analogRead(sensorPin);
    float output = map(sensorValue, 0, 4095, 0, 100);
    
    char lysString[8];
    dtostrf(output, 1, 2, lysString);
    Serial.print("LYS: ");
    Serial.println(output);
    client.publish("esp32/lys", lysString);
}

void loop(){  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  long now = millis();
  if (now - lastMsg > 5000) {
    display.clearDisplay(); //Rydder skjerm 
    display.setCursor(0, 10);
    lastMsg = now;
    Temphum();
    lys();
}
  delay(500);
}
