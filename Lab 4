// Oppgave 1

//Inkludera naudsynte bibliotek
#include <Zumo32U4.h>
#include <Wire.h>

//Naudsynte variabler
Zumo32U4Buzzer buzzer;
Zumo32U4ButtonA buttonA;
Zumo32U4LCD display;

//Funksjonen for blinking og buzzer
void blinkg(){
    buzzer.playFrequency(440, 500, 15); //Skrur på buzzeren
    for(int i=0;i<3;i++){
    ledYellow(1);
    delay(500);
    ledYellow(0);
    delay(500);}
}

void setup() {
  display.clear();
  display.print(F("Gruppe 1...")); //Viser ein melding på displayet
  buttonA.waitForButton(); //Knappen skal brukast til å vente på trykk
}

void loop() {
  if (buttonA.getSingleDebouncedPress()) //Dersom knappen blir trykt 
  {
    blinkg(); //Kjør blinking-funksjonen
  }
  else
  {
    ledYellow(0); //Viss ikkje er LED-en avskrudd
  }
}

// Oppgave 2 

#include <Wire.h> //henter bibliotek for bilen
#include <Zumo32U4.h> //henter bibliotek for bilen

Zumo32U4Motors motors; //setter variable for motorene
Zumo32U4ButtonA buttonA; //setter variabler  for buttonA

void setup() {
  
 buttonA.waitForButton(); //venter for at buttonA blir presset 
 delay(1000); //venter 
}

void venstre8ball(){
  //Sirkel til venstre
  
  for (int speed = 50; speed <= 300; speed = speed + 20)
  //begynner med start speed på 50 og øker med 20 til speed har nådd 300.
  //bilen akselerer 
  {
    motors.setLeftSpeed(speed); //setter hastigheten ved hjelp av for løkken; venstre motor
    delay(200);
    
  }
  for (int speed = 300; speed >= 0; speed = speed - 40)
   //begynner med start speed på 300 og senker med 20 til speed har nådd 0.
   // //bilen deakselerer til 0 
  {
  
    motors.setLeftSpeed(speed); //setter hastigheten ved hjelp av for løkken; venstre motor
    delay(200);
  }
  //har nå fullført en hel runde på ca 360 grader 
}

void hoyre8ball(){
  //Sirkel til høyre 
  for (int speed = 50; speed <= 300; speed = speed + 20)
   //begynner med start speed på 50 og øker med 20 til speed har nådd 300.
  //bilen akselerer 
  {
    motors.setRightSpeed(speed); //setter hastigheten ved hjelp av for løkken; høyre motor
    delay(200);
  }
  for (int speed = 300; speed >= 0; speed = speed - 40)
     //begynner med start speed på 300 og senker med 20 til speed har nådd 0.
  //bilen deakselerer til 0 
  {
    motors.setRightSpeed(speed); //setter hastigheten ved hjelp av for løkken; høyre motor
    delay(200);
  }
   //har nå fullført en hel runde på ca 360 grader 
}

void sirkelsammeretning(){
  //Sirkel til høyre 
  for (int speed = 50; speed <= 300; speed = speed + 20)
   //begynner med start speed på 50 og øker med 20 til speed har nådd 300.
  //bilen akselerer 
  {
    motors.setRightSpeed(speed); //setter hastigheten ved hjelp av for løkken; høyre motor
    delay(200);
  }
  for (int speed = 300; speed >= 0; speed = speed - 40)
     //begynner med start speed på 300 og senker med 20 til speed har nådd 0.
  //bilen deakselerer til 0 
  {
    motors.setRightSpeed(speed); //setter hastigheten ved hjelp av for løkken; høyre motor
    delay(200);
    
   //har nå fullført en hel runde på ca 360 grader 
  }



void sirkelmotsattretning(){
  //Sirkel til venstre
  
  for (int speed = 50; speed <= 300; speed = speed + 20)
  //begynner med start speed på 50 og øker med 20 til speed har nådd 300.
  //bilen akselerer 
  {
    motors.setLeftSpeed(speed); //setter hastigheten ved hjelp av for løkken; venstre motor
    delay(200);
    
  }
  for (int speed = 300; speed >= 0; speed = speed - 40)
   //begynner med start speed på 300 og senker med 20 til speed har nådd 0.
   // //bilen deakselerer til 0 
  {
  
    motors.setLeftSpeed(speed); //setter hastigheten ved hjelp av for løkken; venstre motor
    delay(200);
  }
  //har nå fullført en hel runde på ca 360 grader 
}

void loop() {
  // put your main code here, to run repeatedly:
 venstre8ball(); //kjører venstre sirkel
 hoyre8ball(); // kjører høyre sirkel 
 sirkelsammeretning(); //kjører høyre sirkel
 sirkelmotsattretning(); // kjører høyre sirkel 
}

// Oppgave 3

//henter bibliotek for bilen
#include <Wire.h>
#include <Zumo32U4.h>

//definerer variabler 
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4LineSensors linesensor;
Zumo32U4LCD display;

#define NUM_SENSORS 5
uint16_t static lineSensorValues[NUM_SENSORS]; //deklarerer linsensorvalues
int vent = 5000; 


void setup() {
  linesensor.initFiveSensors(); //begynner linesensor
  unsigned long tidno = millis(); // teller tiden
  unsigned long tidstartt = millis(); //tiden før while løkken begynner
  while(tidno - tidstartt <= vent){ // kjøres hvis diferansen mellom er mindre enn vent
    linesensor.calibrate(); //kalliberer linesensor
    motors.setLeftSpeed(80); //hasitighet på venste motor
    motors.setRightSpeed(80); //hastighet på høyre motor
    tidno = millis(); // tar tiden på nytt 
  }
}

void loop() {
  int position = linesensor.readLine(lineSensorValues); //leser av lineSensorValue
   display.clear(); //clear displayet 
   display.print((position)); //skriver ut position
}

// Oppgave 4

//Importering av nødvendige bibliotek
#include <Wire.h>
#include <Zumo32U4.h>

// Definerer maksimalhastigheten til zumo-bilen
const uint16_t maxSpeed = 300;

Zumo32U4Buzzer buzzer;
Zumo32U4LineSensors lineSensors;
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4LCD display;

int16_t lastError = 0; //Variabel for korrigering av feilbevegelse 

#define NUM_SENSORS 5
unsigned int lineSensorValues[NUM_SENSORS];

// Setter opp spesielle tegn slik at vi kan vise grafer ved hjelp 
// 'barer'

void loadCustomCharacters()
{
  static const char levels[] PROGMEM = {
    0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 63, 63, 63
  };
  display.loadCustomCharacter(levels + 0, 0);  // 1 bar
  display.loadCustomCharacter(levels + 1, 1);  // 2 bars
  display.loadCustomCharacter(levels + 2, 2);  // 3 bars
  display.loadCustomCharacter(levels + 3, 3);  // 4 bars
  display.loadCustomCharacter(levels + 4, 4);  // 5 bars
  display.loadCustomCharacter(levels + 5, 5);  // 6 bars
  display.loadCustomCharacter(levels + 6, 6);  // 7 bars
}

void printBar(uint8_t height)
{
  if (height > 8) { height = 8; }
  const char barChars[] = {' ', 0, 1, 2, 3, 4, 5, 6, (char)255};
  display.print(barChars[height]);
}

//Funksjon som står for kalibereringen 
void calibrateSensors()
{
  display.clear();

  // Venter 1 sekund og starter kalibrasjon av seg selv
  // ved rotasjon frem og tilbake rundt plasert posisjon
  delay(1000);
  for(uint16_t i = 0; i < 120; i++)
  {
    if (i > 30 && i <= 90)
    {
      motors.setSpeeds(-200, 200);
    }
    else
    {
      motors.setSpeeds(200, -200);
    }

    lineSensors.calibrate();
  }
  motors.setSpeeds(0, 0);
}


//Funskjon som viser målinger av posisjon ved hjelp av figurer 
void showReadings()
{
  display.clear();
  unsigned long tidno = millis(); // teller tiden
  unsigned long tidstartt = millis(); //tiden før while løkken begynner
  while(tidno - tidstartt <= 3000)
  {
    lineSensors.readCalibrated(lineSensorValues);
    tidno = millis(); // tar tiden på nytt 
    display.gotoXY(0, 0);
    for (uint8_t i = 0; i < NUM_SENSORS; i++)
    {
      uint8_t barHeight = map(lineSensorValues[i], 0, 1000, 0, 8);
      printBar(barHeight);
    }
  }
}

void setup()
{
  lineSensors.initFiveSensors();
  loadCustomCharacters();

  // Spiller en velkomstsang 
  buzzer.play(">g32>>c32");

  // Venter på at knapp a skal trykkes og slippes 
  display.clear();
  display.print(F("Trykk A ="));
  display.gotoXY(0, 1);
  display.print(F("kalibrering"));
  buttonA.waitForButton();

  calibrateSensors();//Kjører denne funksjonen
 
  showReadings();//Viser barer spm viser kor den banen er registrert i 3 sek
  delay(1000);
  display.clear();
  display.print(F("kalib ferdig"));
  display.gotoXY(0, 1);
  display.print(F("Trykk A"));
  buttonA.waitForButton();


  // Spiller musikk og venter på at melodien blir ferdig før start av bilen
  display.clear();
  display.print(F("Start!"));
  buzzer.play("L16 cdegreg4");
  while(buzzer.isPlaying());
}

void loop()
{
  int16_t position = lineSensors.readLine(lineSensorValues);//Mål for posisjsonen til bilen
  display.clear(); //Fjerner alt som vises fra skjermen 
  display.print((position)); //Kontinuerlig visning av posisjonen til bilen 
  int16_t error = position - 2000; //Feilestimat 
  int16_t speedDifference = error / 4 + 6 * (error - lastError);

  lastError = error;

  int16_t leftSpeed = (int16_t)maxSpeed + speedDifference;
  int16_t rightSpeed = (int16_t)maxSpeed - speedDifference;

  leftSpeed = constrain(leftSpeed, 0, (int16_t)maxSpeed);
  rightSpeed = constrain(rightSpeed, 0, (int16_t)maxSpeed);

  motors.setSpeeds(leftSpeed, rightSpeed);
}
