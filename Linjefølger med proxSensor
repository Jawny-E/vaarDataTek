//Importering av nødvendige bibliotek
#include <Wire.h>
#include <Zumo32U4.h>

// Definerer maksimalhastigheten til zumo-bilen
const uint16_t maxSpeed = 300;


Zumo32U4Buzzer buzzer;
Zumo32U4LineSensors lineSensors;
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4LCD display;
Zumo32U4ProximitySensors proxSensors; // til prox sensor

int16_t lastError = 0; //Variabel for korrigering av feilbevegelse 

#define NUM_SENSORS 5
unsigned int lineSensorValues[NUM_SENSORS];



const int period = 100;
unsigned long lastMillis = 0;

// Setter opp spesielle tegn slik at vi kan vise grafer ved hjelp 
// 'barer'

void loadCustomCharacters()
{
  static const char levels[] PROGMEM = {
    0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 63, 63, 63
  };
  display.loadCustomCharacter(levels + 0, 0);  // 1 bar
  display.loadCustomCharacter(levels + 1, 1);  // 2 bars
  display.loadCustomCharacter(levels + 2, 2);  // 3 bars
  display.loadCustomCharacter(levels + 3, 3);  // 4 bars
  display.loadCustomCharacter(levels + 4, 4);  // 5 bars
  display.loadCustomCharacter(levels + 5, 5);  // 6 bars
  display.loadCustomCharacter(levels + 6, 6);  // 7 bars
}

void printBar(uint8_t height)
{
  if (height > 8) { height = 8; }
  const char barChars[] = {' ', 0, 1, 2, 3, 4, 5, 6, (char)255};
  display.print(barChars[height]);
}

//Funksjon som står for kalibereringen 
void calibrateSensors()
{
  display.clear();

  // Venter 1 sekund og starter kalibrasjon av seg selv
  // ved rotasjon frem og tilbake rundt plasert posisjon
  delay(1000);
  for(uint16_t i = 0; i < 120; i++)
  {
    if (i > 30 && i <= 90)
    {
      motors.setSpeeds(-200, 200);
    }
    else
    {
      motors.setSpeeds(200, -200);
    }

    lineSensors.calibrate();
  }
  motors.setSpeeds(0, 0);
}


//Funskjon som viser målinger av posisjon ved hjelp av figurer 
void showReadings()
{
  display.clear();
  unsigned long tidno = millis(); // teller tiden
  unsigned long tidstartt = millis(); //tiden før while løkken begynner
  while(tidno - tidstartt <= 3000)
  {
    lineSensors.readCalibrated(lineSensorValues);
    tidno = millis(); // tar tiden på nytt 
    display.gotoXY(0, 0);
    for (uint8_t i = 0; i < NUM_SENSORS; i++)
    {
      uint8_t barHeight = map(lineSensorValues[i], 0, 1000, 0, 8);
      printBar(barHeight);
    }
  }
}

void setup()
{
  lineSensors.initFiveSensors();
  loadCustomCharacters();

  // Spiller en velkomstsang 
  buzzer.play(">g32>>c32");

  // Venter på at knapp a skal trykkes og slippes 
  display.clear();
  display.print(F("Trykk A ="));
  display.gotoXY(0, 1);
  display.print(F("kalibrering"));
  buttonA.waitForButton();

  calibrateSensors();//Kjører denne funksjonen
 
  showReadings();//Viser barer spm viser kor den banen er registrert i 3 sek
  delay(1000);
  display.clear();
  display.print(F("kalib ferdig"));
  display.gotoXY(0, 1);
  display.print(F("Trykk A"));
  buttonA.waitForButton();


  // Spiller musikk og venter på at melodien blir ferdig før start av bilen
  display.clear();
  display.print(F("Start!"));
  buzzer.play("L16 cdegreg4");
  while(buzzer.isPlaying());

  // Henter frem sensor.
  proxSensors.initThreeSensors();
}


  


void loop()
{
  unsigned long currentMillis = millis();
  int16_t position = lineSensors.readLine(lineSensorValues);//Mål for posisjsonen til bilen
  display.clear(); //Fjerner alt som vises fra skjermen 
  //display.print((position)); //Kontinuerlig visning av posisjonen til bilen 
  int16_t error = position - 2000; //Feilestimat 
  int16_t speedDifference = error / 4 + 6 * (error - lastError);

  lastError = error;

  int16_t leftSpeed = (int16_t)maxSpeed + speedDifference;
  int16_t rightSpeed = (int16_t)maxSpeed - speedDifference;

  leftSpeed = constrain(leftSpeed, 0, (int16_t)maxSpeed);
  rightSpeed = constrain(rightSpeed, 0, (int16_t)maxSpeed);

  motors.setSpeeds(leftSpeed, rightSpeed);



if (currentMillis-lastMillis > period) 
{
    
    proxSensors.read();
   int center_left_sensor = proxSensors.countsFrontWithLeftLeds(); 
   //int center_right_sensor = proxSensors.countsFrontWithRightLeds();

   while (( center_left_sensor == 6 ) && ( leftSpeed > 0 &&  rightSpeed > 0 )) { 
           //forsøker å stoppe dersom den ser en objekt

       Serial.println("Hi");
       leftSpeed = 1 ;
       Serial.println(leftSpeed);
       rightSpeed = 1;
       motors.setSpeeds(leftSpeed, rightSpeed);
       

    proxSensors.read();
    center_left_sensor = proxSensors.countsFrontWithLeftLeds();
    //center_right_sensor = proxSensors.countsFrontWithRightLeds();
    display.clear();
    display.gotoXY(0,1);
    display.print(center_left_sensor);
lastMillis = millis(); 
}}}
