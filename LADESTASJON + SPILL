//Bibliotek nødvendige bibbliotek for RFID-readeren
#include <SPI.h>
#include <MFRC522.h>
#define RST_PIN         22         
#define SS_PIN          5   
MFRC522 mfrc522(SS_PIN, RST_PIN); 
int cases = 1; //Variabelen 

#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>

// Lagrer SSID og passord på nettverket vi benytter oss av i to konstanter 
const char* ssid = "ThisIsANetwork";
const char* password = "ThisIsPassword";

// Lagrer IP-adressen til MQTT-brokeren vi benytter oss av 
const char* mqtt_server = "192.168.32.216";

// Setter opp tilkobling mellom ESP32 og WiFi
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;


void setup_wifi() { //Funskjon for å sette opp WiFi
  delay(500);
  // Indikerer at vi starter oppkoblingen til Wifi 
  Serial.println();
  Serial.print("Tilkobler til");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  //Dersom vi venter på å bli koblet opp printes det "..."
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  //Indikerer at vi er koblet opp, samt returnerer IP adressen
  Serial.println("");
  Serial.println("WiFi koblet til");
  Serial.println("IP addressen: ");
  Serial.println(WiFi.localIP());
}

//Bestemmer navn for ledpinner
const int redLed = 4;
const int greenLed = 2;
const int yellowLed = 34;

//Bestemmer navn for andre relevante pinner 
const int buzzerPin = 33;
const int SW1 = 25;

int winnerBeep = 750;
int faultBeep = 200;
unsigned long wait;
unsigned long now = 0;
//int time;

void setup() {
  pinMode(redLed,OUTPUT);
  pinMode(yellowLed,OUTPUT);
  pinMode(greenLed,OUTPUT);
  
  pinMode(buzzerPin,OUTPUT);
  pinMode(SW1,INPUT);
  pinMode(redLed,OUTPUT);

  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
    }

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("esp32/konto");
      client.subscribe("esp32/solcelle");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void celebrate(){ //Her er funksjonen for vinnarfanfare
    for(int i = 0; i < 3;i++){
      digitalWrite(greenLed, HIGH);
      delay(100);
      digitalWrite(greenLed, LOW);
      delay(100);}
    }
 
void feil(){ //Her er funksjonen for feillyd
  for(int i=0; i<3;i++){
      digitalWrite(redLed, HIGH);
      delay(100);
      digitalWrite(redLed, LOW);}
      delay(100);
      }

void loop(){
  switch(cases){
    {
    case 1: 

      if ( ! mfrc522.PICC_IsNewCardPresent()) 
    {
      return;
    }
    // Velger et av kortene 
    if ( ! mfrc522.PICC_ReadCardSerial()) 
    {
      return;
    }
    //Oppretter en plass vi kan lagre avlesingene fra readeren
    String innhold= "";
    byte letter;
    for (byte i = 0; i < mfrc522.uid.size; i++) 
    {
       innhold.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
       innhold.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    Serial.println();
    innhold.toUpperCase();
    if (innhold.substring(1) == "C2 95 A5 3D") //UID-taggen til kortet på zumobilen 
    {
      Serial.println("Velkommen gruppe 1");
      delay(200);
      cases = 2;
      break;
    }
     if (innhold.substring(1) == "D2 F6 97 18") //UID-taggen til kortet på zumobilen 
    {
      Serial.println("Velkommen til Casino");
      Serial.println();
      delay(200);
      cases = 3;
      break;
    }
    
   else {
      Serial.println("Ikke registrert kunde");
      delay(1000);
      cases = 1;
      break;
   }}
   
  
   case 2: //Sender kunden til ladestasjon funksjonaliteten 
   {
    if (!client.connected()) {
    reconnect();
      }
      client.loop();    
      long now = millis();
      if (now - lastMsg > 5000) {
      Serial.println("LADING");  
      cases = 1;   
    }
     break;
   }

//    case 3:
//     Serial.println("KUTAS"); 
//     while(digitalRead(SW1)==HIGH){
//     digitalWrite(yellowLed,HIGH);
//     cases = 4;
//   }
//   case 4:
//    Serial.println("Spillet starter");
//    
//    time = random(3000, 6000);
//    delay(500);
//    wait = millis();
//    now = millis();
//    cases = 5;
//    while(now - wait <= time){
//      if(digitalRead(SW1)==LOW){
//        cases = 1;
//        feil();
//        break; }
//      now = millis();
//    }
// 
//   case 5:
//     Serial.println("Gratulerer du vant");
//     digitalWrite(redLed,LOW);
//      digitalWrite(greenLed, HIGH);
//      if(digitalRead(SW1)==LOW){
//          cases = 1;
//          celebrate();
//          break; }
}
}
