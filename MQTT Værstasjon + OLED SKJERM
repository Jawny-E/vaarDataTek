// Hvordan koble opp AHT10 til ESP32:
// SCL = D22
// SDA = D21

//AHT10 BIBLIOTEK 
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHT10.h>
Adafruit_AHT10 aht;

//OLED SKJERM BIBLIOTEK 
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display vidde, i pixler
#define SCREEN_HEIGHT 32 //
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Replace the next variables with your SSID/Password combination
const char* ssid = "ThisIsANetwork";
const char* password = "ThisIsPassword";

// Add your MQTT Broker IP address, example:
//const char* mqtt_server = "192.168.1.144";
const char* mqtt_server = "192.168.254.216";

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

// LED Pin
const int vifte = 4;
const int ledPin = 5;

void setup_wifi() {
  delay(500);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


void setup() {
  Serial.begin(115200);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  pinMode(vifte, OUTPUT);

    if (! aht.begin()) {
    Serial.println("Could not find AHT10? Check wiring");
    while (1) delay(10);
  }
  Serial.println("AHT10 found");

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Addresserer 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);}

  display.clearDisplay(); // Clearer skjerm 
  display.setTextSize(1); //Velger størrelse på tekst
  display.setTextColor(WHITE); // Velger farge på tekst 
  display.setCursor(0, 10); //
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  // Feel free to add more if statements to control more GPIOs with MQTT

  // If a message is received on the topic esp32/output, you check if the message is either "on" or "off". 
  // Changes the output state according to the message
  if (String(topic) == "esp32/output") {
    Serial.print("Changing output to ");
    if(messageTemp == "on"){
      Serial.println("on");
      digitalWrite(ledPin, HIGH);
    }
    else if(messageTemp == "off"){
      Serial.println("off");
      digitalWrite(ledPin, LOW);
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("esp32/output");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  long now = millis();
  if (now - lastMsg > 5000) {
    display.clearDisplay(); //Rydder skjerm 
    display.setCursor(0, 10);
    lastMsg = now;
    sensors_event_t humidity, temp;
    int humidity_value;
    aht.getEvent(&humidity, &temp);
    // Temperature in Celsius
    float temperature = temp.temperature;  
    // Uncomment the next line to set temperature in Fahrenheit 
    // (and comment the previous temperature line)
    //temperature = 1.8 * bme.readTemperature() + 32; // Temperature in Fahrenheit
    
    // Convert the value to a char array
    char tempString[8];
    dtostrf(temperature, 1, 2, tempString);
    Serial.print("Temperature: ");
    Serial.println(tempString);
    display.setCursor(0, 0);
    display.print(tempString);
    display.print(" Celcius");
    display.display();
    client.publish("esp32/temperature", tempString);
    
    //Tar viften på hvis temperaturen overstiger 25 grader
    if(temperature > 25){
      digitalWrite(vifte, HIGH);
    }
    else{
      digitalWrite(vifte, LOW);
    }

    humidity_value = humidity.relative_humidity;
    
    // Convert the value to a char array
    char humString[8];
    dtostrf(humidity_value, 1, 2, humString);
    Serial.print("Humidity: ");
    Serial.println(humString);
    
    //Displayer verdiene på skjermen
    display.setCursor(0, 20);
    display.print(humString);
    display.print(" %");
    display.display();
    client.publish("esp32/humidity", humString);
  }
  delay(500);
}
